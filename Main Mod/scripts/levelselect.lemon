global u8 LS_BG
global u8 LS_FONT
global u8 LS_BOSS
global u8 ST_STYLE
global u8 LS_HCZ
global u8 LS_ICZ
global u8 LS_MHZ
global u8 ScaredHaters
global u8 LS_MUSIC
global u8 EM_CHAOSEMERALDS
global u8 EM_EXTRALIVES
global u8 EM_EXTRACONTINUES
global u8 LS_ZONEORDER
global u8 EM_2PSTAGES
global u8 LS_FORCE_BASE

constant array<u64> LSNames =
{
	"angel island", "[ZONE 2]", "marble garden", "carnival night", "[ZONE 5]", "launch base", "[ZONE 7]", "flying battery", "sandopolis",
	"lava reef", "hidden palace", "sky sanctuary", "death egg", "the doomsday", "bonus stage", "special stage", "sound test"
}

constant array<u64> LSNames_OGOrder =
{
	"angel island", "[ZONE 2]", "marble garden", "carnival night", "flying battery", "[ZONE 5]", "launch base", "[ZONE 7]", "sandopolis",
	"lava reef", "hidden palace", "sky sanctuary", "death egg", "the doomsday", "bonus stage", "special stage", "sound test"
}

constant array<u64> HCZNames =
{
	"hydrocity", "hydro city", "hydrossity", "toilet town"
}

constant array<u64> ICZNames =
{
	"icecap", "ice cap", "mount shiver"
}

constant array<u64> MHZNames =
{
	"mushroom valley", "mushroom hill", "mushroom forest"
}

constant array<u64> LSNames_2P =
{
	"azure lake", "balloon park", "chrome gadget", "desert palace", "endless mine", "hidden palace altar", "game ending"
}

constant array<u64> LSNumbers =
{
	"1", "2", "[BOSS TEXT]", "s", "k", "g", "r", "s"
}

constant array<u64> LSBossText =
{
	"3", "x", "boss", "{}"
}


function void Renderer.drawLSText(u64 FONT_LS, u64 FONT_LS_Y)
{
	if (EM_2PSTAGES)
		{
			u16 height = 8
			for (u8 i; i < LSNames_2P.length(); ++i)
			{
				u64 zonename = LSNames_2P[i]
				if (levelselect.selection == i)
					u64 font = FONT_LS_Y
				else
					font = FONT_LS
				Renderer.drawText(font, 16, height, zonename, 0xFFFFFFFF, 1, 0, 0x9f7e, true)
				height += 24
			}
		}
		else
		{
			u16 xposition = 16
			u16 yposition = 8
			for (u8 i = 0; i < (LSNames.length()-1); i++)
			{
				if (i == 9)
				{
					xposition = 176
					yposition = 8
				}
				if (!LS_ZONEORDER)
					u64 zonename = LSNames[i]
				else
					zonename = LSNames_OGOrder[i]
				if (zonename == "[ZONE 2]") // HCZ Names
					zonename = HCZNames[LS_HCZ]
				else if (zonename == "[ZONE 5]") // ICZ Names
					zonename = ICZNames[LS_ICZ]
				else if (zonename == "[ZONE 7]") // MHZ Names
					zonename = MHZNames[LS_MHZ]
				u8 test = 0
				if ((levelselect.selection / 2) == i && (levelselect.selection != 0x14 && levelselect.selection != 0x1b && levelselect.selection != 0xff))
					u64 font = FONT_LS_Y
				else if ((i == 9 && levelselect.selection == 0x14) || (i == 12 && levelselect.selection == 0x1b) || (i == 14 && levelselect.selection == 0xff))
				{
					font = FONT_LS_Y
					test = 1
				}
				else
					font = FONT_LS
				Renderer.drawText(font, xposition, yposition, zonename, 0xFFFFFFFF, 1, 0, 0x9f7e, true)
				u16 numberXposition = xposition + 120
				u16 numberYposition = yposition
				u8 LSCount = 2
				if (i == 9 || i == 12 || i == 14)
					LSCount = 3
				for (u8 j = 0; j < LSCount; j++)
				{
					u64 numberfont
					u8 offset = 0
					if (i == 11)
						offset += 3
					if (i == 14)
						offset += 5
					if (levelselect.selection/2 == i)
					{
						if (j == 0 && levelselect.selection % 2 == 0)
							numberfont = FONT_LS_Y
						else if (j == 1 && levelselect.selection % 2 != 0)
							numberfont = FONT_LS_Y
						else
							numberfont = FONT_LS
					}
					else if (test && j == 2)
						numberfont = FONT_LS_Y
					else
						numberfont = FONT_LS
					u64 number = LSNumbers[j+offset]
					if (number == "[BOSS TEXT]")
					{
						number = LSBossText[LS_BOSS]
						if (LS_BOSS == 3)
							numberXposition -= 8
					}
					if (i != 10 && i != 13)
						Renderer.drawText(numberfont, numberXposition, numberYposition, number, 0xFFFFFFFF, 1, 0, 0x9f7e, true)
					numberYposition += 8
				}
				yposition += 24
			}
		}
		
		// sound test values
		// this determines whether the text will be highlighted or not, since this isn't a zone in the game (no worrying about an act 2)
		u64 determineSTcolor
		if (levelselect.selection == 0x20)
			determineSTcolor = FONT_LS_Y
		else
			determineSTcolor = FONT_LS
		if (ST_STYLE == 1)
		{
			Renderer.drawText(determineSTcolor, 264, 176, "<   >", 0xFFFFFFFF, 1, 0, 0xFFFD, true)
			if (levelselect.soundtest < 0x0a)
			{
				Renderer.drawText(determineSTcolor, 272, 176, "00" , 0xFFFFFFFF, 1, 0, 0xFFFD, true)
				Renderer.drawText(determineSTcolor, 288, 176,(stringformat("%d", levelselect.soundtest)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
			}
			else if (levelselect.soundtest < 0x64)
			{
				Renderer.drawText(determineSTcolor, 272, 176, "0" , 0xFFFFFFFF, 1, 0, 0xFFFD, true)
				Renderer.drawText(determineSTcolor, 280, 176,(stringformat("%d", levelselect.soundtest)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
			}
			else
				Renderer.drawText(determineSTcolor, 272, 176,(stringformat("%d", levelselect.soundtest)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
		}
		else
		{
			Renderer.drawText(determineSTcolor, 272, 176, "*  *", 0xFFFFFFFF, 1, 0, 0xFFFD, true)
			if (levelselect.soundtest < 0x10)
			{
				Renderer.drawText(determineSTcolor, 280, 176, "0" , 0xFFFFFFFF, 1, 0, 0xFFFD, true)
				Renderer.drawText(determineSTcolor, 288, 176,(stringformat("%x", levelselect.soundtest)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
			}
			else
				Renderer.drawText(determineSTcolor, 280, 176,(stringformat("%x", levelselect.soundtest)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
		}
		Renderer.drawText(determineSTcolor, 176, 176, LSNames[16], 0xFFFFFFFF, 1, 0, 0xFFFD, true)
}

function void ScareAwayTheHaters()
{
	if (Mods.isModActive("Sonic 3 Complete Sound Test") || Mods.isModActive("extended level select") && !LS_FORCE_BASE)
	{
		if (Mods.getModPriority("Sonic 3 A.I.R. with Extra Mushrooms") > Mods.getModPriority("Sonic 3 Complete Sound Test"))
		{
			playMusic(MUSIC_CTRL_STOP)
			ScaredHaters = 1
			Standalone.playAudio(0xB2)
		}
		else if (Mods.getModPriority("Sonic 3 A.I.R. with Extra Mushrooms") > Mods.getModPriority("extended level select"))
		{
			playMusic(MUSIC_CTRL_STOP)
			ScaredHaters = 1
			Standalone.playAudio(0xB2)
		}
	}
	else
	{
		if (ScaredHaters != 1)
		{
			playLevelSelectMusic()
			EM_CHAOSEMERALDS = 0
			EM_2PSTAGES = 0
		}
	}
}

function void playLevelSelectMusic()
{
	if (LS_MUSIC != 0)
		playMusic(MUSIC_CTRL_STOP)
	if (LS_MUSIC == 1 || (LS_MUSIC == 2) && !Mods.isModActive("Custom Theme for Data Select & Level Select"))
		Audio.playAudio("em_levelselect", AudioContext.CONTEXT_MUSIC)
	else if (LS_MUSIC == 2)
			playMusic(0xfe)
	else if (LS_MUSIC == 3)
		Audio.playAudio("custom_levelselect", AudioContext.CONTEXT_MUSIC)
	else if (LS_MUSIC == 4 || (LS_MUSIC == 5 && !Mods.isModActive("Sound Additions")))
		if (Game.getSetting(SETTING_AUDIO_CONTINUE_SCREEN) == 0)
			Audio.playAudio("28_sonic3", AudioContext.CONTEXT_MUSIC)
		else Audio.playAudio(MUSIC_CONTINUE, AudioContext.CONTEXT_MUSIC)
	else if (LS_MUSIC == 5)
		Audio.playAudio("bs_start", AudioContext.CONTEXT_MUSIC)
	else
		playMusic(MUSIC_DATASELECT)
}

function void DrawLevelSelectBG()
{
	u64 prefix_key // origins or not
	u64 suffix_key // S2/3, S3C, S3A (in S3C), S&K (in S3C), EM, or EM (alt)
	if (Mods.isModActive("Origins Title + Menu Backgrounds") || Mods.isModActive("Consistent Sonic 3"))
		prefix_key = "origins_"
	if (LS_BG == 1) // S3C
		suffix_key = "s3c"
	else if (LS_BG == 2) // S3A
		suffix_key = "s3a"
	else if (LS_BG == 3) // S&K, currently unused because of the new idea i had
		suffix_key = "s&k"
	else if (LS_BG == 4) // EM
		suffix_key = "priorityissue"
	else
		suffix_key = "em"
	if (LS_BG != 3)
		Renderer.drawCustomSprite(stringformat("%sls_%s", prefix_key, suffix_key), getScreenExtend() - 40, 0, 0x00, 0, 0x1000)
	Renderer.drawCustomSprite("ls_s&k", getScreenExtend() - 40, 0, 0x00, 0, 0x1000)
}

function void DrawSpritesToLevelSelect()
{
	u16 beginningOfText = getScreenHeight()/2 - 80

	// kid you not, this is probably the best way i could've handled the font selection system
	u64 FONT_LS
	u64 FONT_LS_Y
	if (LS_FONT == 1)
	{
		FONT_LS = "ls_font_3c"
		FONT_LS_Y = "ls_font_y_3c"
	}
	else if (LS_FONT == 2)
	{
		FONT_LS = "ls_font_custom"
		FONT_LS_Y = "ls_font_y_custom"
	}
	else
	{
		FONT_LS = "ls_font"
		FONT_LS_Y = "ls_font_y"
	}

	if (ScaredHaters == 1)
	{
		scareTheHaters(FONT_LS)
	}
	if (LS_BG != 0)
		DrawLevelSelectBG()
	// render the text
	if (ScaredHaters == 0)
		Renderer.drawLSText(FONT_LS, FONT_LS_Y)
	//Renderer.drawCustomSprite("ls_text", 0, 0, 0x00, 0, 0x1000)
	if (ScaredHaters != 1)
	{
		Renderer.drawText(FONT_LS_Y, (getScreenWidth()-104)-48, getScreenHeight()-16,(stringformat("%x", (levelselect.characters / 10) % 10)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
		Renderer.drawText(FONT_LS_Y, (getScreenWidth()-104)-40, getScreenHeight()-16,(stringformat("%x", levelselect.characters % 10)), 0xFFFFFFFF, 1, 0, 0xFFFD, true)
		if (levelselect.characters == 0)
		{
			Renderer.drawCustomSprite("continue_icon_sonic", getScreenWidth()-104, getScreenHeight()-8, 0x00, 0, 0x9f7e)
			Renderer.drawCustomSprite("continue_icon_tails", (getScreenWidth()-104)-16, getScreenHeight()-8, 0x00, 0, 0x9f7e)
		}
		else if (levelselect.characters == 1)
		{
			Renderer.drawCustomSprite("continue_icon_sonic", getScreenWidth()-104, getScreenHeight()-8, 0x00, 0, 0x9f7e)
		}
		else if (levelselect.characters == 2)
		{
			Renderer.drawCustomSprite("continue_icon_tails", getScreenWidth()-104, getScreenHeight()-8, 0x00, 0, 0x9f7e)
		}
		else if (levelselect.characters == 3)
		{
			Renderer.drawCustomSprite("continue_icon_knuckles", getScreenWidth()-104, getScreenHeight()-8, 0x00, 0, 0x9f7e)
		}
		else if (levelselect.characters == 4)
		{
			Renderer.drawCustomSprite("continue_icon_knuckles", getScreenWidth()-104, getScreenHeight()-8, 0x00, 0, 0x9f7e)
			Renderer.drawCustomSprite("continue_icon_tails", (getScreenWidth()-104)-16, getScreenHeight()-8, 0x00, 0, 0x9f7e)
		}
		else if (levelselect.characters > 4)
		{
			// TODO: (PROPER) Extra Slot Support
			// probably coming whenever that new base is released. glad they're documenting it and stuff though
			Renderer.drawCustomSprite("unknown_extraslot", (getScreenWidth()-104)-11, (getScreenHeight()-8)-24, 0x00, 0, 0x9f7e)
		}
		u8 miles_check = (global.region_code & 0x80) ? 0x39ab6a : 0x39aa18
		if (levelselect.selection < 0x05 && EM_2PSTAGES)
			Renderer.drawCustomSprite(stringformat("ls_icon_%d_2p", levelselect.selection), getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
		else if (levelselect.selection < 0x10 && levelselect.selection > 0x07 && LS_ZONEORDER && !EM_2PSTAGES)
			Renderer.drawCustomSprite(stringformat("ls_icon_%d_a", levelselect.selection/2), getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
		else if (levelselect.selection < 0x20 && levelselect.selection != 0x1b && levelselect.selection != 0x14 && !EM_2PSTAGES)
			Renderer.drawCustomSprite(stringformat("ls_icon_%d", levelselect.selection/2), getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
		else
		{
			if (levelselect.selection == 0x05 && EM_2PSTAGES)
				Renderer.drawCustomSprite("ls_icon_10", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
			if (levelselect.selection == 0x14)
				Renderer.drawCustomSprite("ls_icon_9", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
			else if (levelselect.selection == 0x1b)
				Renderer.drawCustomSprite("ls_icon_12", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
			else if (levelselect.selection == 0xff)
				Renderer.drawCustomSprite("ls_icon_14", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
		}
		// sound test	
		if (levelselect.selection >= 0x00)
			if (levelselect.characters == 0 || levelselect.characters == 1)
				if (Mods.isModActive("Mario (SHC 2022)"))
					Renderer.drawCustomSprite("ls_mario", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
				else
					Renderer.drawSprite("ls_sonic", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
			else if (levelselect.characters == 2)
				if miles_check == 0x39ab6a
					Renderer.drawCustomSprite("ls_tails", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
				else
					Renderer.drawCustomSprite("ls_miles", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
			else if (levelselect.characters == 3 || levelselect.characters == 4)
				Renderer.drawCustomSprite("ls_kte", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
			else
				Renderer.drawCustomSprite("ls_unknown", getScreenWidth()-64, getScreenHeight()-44, 0x00, 0, 0x9f7e)
				
		Renderer.drawCustomSprite("ls_emblem", getScreenWidth()-88, getScreenHeight()-56, 0x00, 0, 0x9f7e)
	}
}

function void scareTheHaters(u64 FONT_LS)
{
	u16 beginningOfText = getScreenHeight()/2 - 80
	Renderer.drawCustomSprite("fixpriority", getScreenWidth()-200, 112, 0x00, 0, 0xFFFE)
		Renderer.drawCustomSprite("livemario", 0, 112, 0x00, 0, 0xFFFE)
		if (Mods.isModActive("Origins Title + Menu Backgrounds") || Mods.isModActive("Consistent Sonic 3"))
			Renderer.drawCustomSprite("origins_ls_priorityissue", getScreenExtend() - 40, 0, 0x00, 0, 0x1000)
		else
			Renderer.drawCustomSprite("ls_priorityissue", getScreenExtend() - 40, 0, 0x00, 0, 0x1000)
		Renderer.drawText(FONT_LS, 8, beginningOfText, "it seems there was some issues involving: ", 0xFFFFFFFF, 1, 0, 0xFFFF, true)
		if (Mods.isModActive("Sonic 3 Complete Sound Test"))
		{
			if (Mods.getModPriority("Sonic 3 A.I.R. with Extra Mushrooms") > Mods.getModPriority("Sonic 3 Complete Sound Test"))
				Renderer.drawText(FONT_LS, 8, beginningOfText + 8, "*'sonic 3 complete sound test'", 0x00FFFFFF, 1, 0, 0xFFFF, true)
		}
		if (Mods.isModActive("extended level select"))
		{
			if (Mods.isModActive("Sonic 3 Complete Sound Test"))
			{
				if (Mods.getModPriority("Sonic 3 A.I.R. with Extra Mushrooms") > Mods.getModPriority("extended level select"))
				{
					beginningOfText = beginningOfText + 8
					Renderer.drawText(FONT_LS, 8, beginningOfText + 8, "*'extended level select'", 0x00FFFFFF, 1, 0, 0xFFFF, true)
				}
			}
			else
			{
				if (Mods.getModPriority("Sonic 3 A.I.R. with Extra Mushrooms") > Mods.getModPriority("extended level select"))
				{
					Renderer.drawText(FONT_LS, 8, beginningOfText + 8, "*'extended level select'", 0x00FFFFFF, 1, 0, 0xFFFF, true)
				}
			}
		}
		Renderer.drawText(FONT_LS, 8, beginningOfText + 16, "please make the mod(s) higher in priority to:", 0xFFFFFFFF, 1, 0, 0xFFFF, true)
		Renderer.drawText(FONT_LS, 8, beginningOfText + 24, "'sonic 3 a.i.r. with extra mushrooms'", 0xFFFF00FF, 1, 0, 0xFFFF, true)
		Renderer.drawText(FONT_LS, 8, beginningOfText + 32, "or turn on the 'use base level select' option", 0xFFFFFFFF, 1, 0, 0xFFFF, true)
		Renderer.drawText(FONT_LS, 8, beginningOfText + 32, "               'use base level select'       ", 0xFF0000FF, 1, 0, 0xFFFF, true)
		Renderer.drawText(FONT_LS, 8, beginningOfText + 40, "if you wish to use that level select menu.", 0xFFFFFFFF, 1, 0, 0xFFFF, true)
		Renderer.drawText(FONT_LS, 8, beginningOfText + 48, "alternatively: disable the mod(s) if you want", 0xFFFFFFFF, 1, 0, 0xFFFF, true)
		Renderer.drawText(FONT_LS, 8, beginningOfText + 56, "to experience the extra mushrooms level select.", 0xFFFFFFFF, 1, 0, 0xFFFF, true)
}

function void LevelSelect.init()
{
	if (!LS_FORCE_BASE)
	{
		// Disable active display for now
		VDP.Config.setActiveDisplay(false)

		fn0011ca()

		// Configure VDP registers
		VDP.Config.enableHInt(false)
		VDP.Config.setNameTableBasePlaneA(0xc000)
		VDP.Config.setNameTableBasePlaneB(0xe000)
		VDP.Config.setBackdropColor(0)
		VDP.Config.setRenderingModeConfiguration(false)
		VDP.Config.setPlayfieldSizeInPixels(512, 256)
		VDP.Config.setVerticalScrolling(false, 0)	// Horizontal scrolling mode without scroll mask

		zeroMemory(0xffffac00, 0x400)
		zeroMemory(0xffffb000, 0x2000)

		u16[0xfffffb00] = 0
		u32[0xfffffbfc] = 0xfffffb00

		Enigma.decompress(0x0cab54, 0xffff0000, (sprite_attribute.PALETTE.LINE3 | (LevelSelect.Background.targetInVRAM >> 0)))
		copyRectToVRAM(0xffff0000, 0xe000, 0x28, 0x1c)

		zeroMemory(0xffff0000, 0x460 * 2)

		A3 = 0xffff0000
		A1 = 0x0080e6
		A5 = 0x0080c4
		D0 = 0

		D3 = 0
		fn007f62()

		ScareAwayTheHaters()

		DrawSpritesToLevelSelect()

		global.characters = levelselect.characters
		u16[0xffffff02] = 0
		global.level_started = 0
		u16[0xfffff7f0] = 0

		A2 = 0x0081b0
		LevelTilesAnim.Default()

		Level.loadNonfadingPaletteData(0x04)

		copyMemory(0xfffffcc0, 0xfffffc40, 0x20)
		zeroMemory(0xfffffc40, 0x20)

		global.demo_countdown = 1799	// 30 seconds (minus one frame)
		competition_mode.active = 0
		camera.position.x = 0
		camera.position.y = 0
		global.active_saveslot = 0
		level.giantrings_clear = 0
		checkpoint.number = 0
		global.stage_type = 0
		bluespheres.minigame_mode = 0

		u16[0xffffffe4] = 0
		u16[0xffffffe6] = 0
		global.frame_state = 0x16

	#if STANDALONE
		// Corrections for widescreen
		for (u16 base = 0xe000; base < 0xee00; base += 0x80)
		{
			for (u16 x = 0; x < 0x30; x += 2)
			{
				setVRAM(base + x + 0x50, getVRAM(base + x + 0x08))
			}
		}

		// Write sound test digits (they are missing otherwise)
		VDP.setupVRAMWrite(0xcb46)

	#endif

		waitForNextFrame()

		// Re-enable active display again
		VDP.Config.setActiveDisplay(true)
	}
	else base.LevelSelect.init()
}
function bool LevelSelect.innerUpdate()
{
	if (!LS_FORCE_BASE)
	{
	Renderer.resetSprites()
	DrawSpritesToLevelSelect()
	
#if STANDALONE
	// Corrections for widescreen
	//  -> Actually no need to do this each frame, but I like to load level select save states and want it to be corrected after initialization
	for (u16 base = 0xe000; base < 0xee00; base += 0x80)
	{
		for (u16 x = 0; x < 0x30; x += 2)
		{
			setVRAM(base + x + 0x50, getVRAM(base + x + 0x08))
		}
	}

	// Foreground scroll offset
#endif

#if !STANDALONE
	set_status_register(0x2700)
#endif
	D3 = 0
	fn007f62()
	fn007e64()
	D3.u16 = 0x6000
	fn007f62()
#if !STANDALONE
	set_status_register(0x2300)
#endif

	A2 = 0x0081b0
	LevelTilesAnim.Default()		
	if ((control.pad1.pressed | control.pad2.pressed) & CONTROL_START)
	{
		if (global.lock_on_state != 0)
		{
			if (levelselect.characters < CHARS_KNUCKLES_ALONE)
				levelselect.characters = CHARS_SONIC_ALONE
		}

		global.characters = levelselect.characters
	#if STANDALONE
		// Handle Knuckles & Tails
		useKnucklesAndTails = (global.characters == CHARS_KNUCKLES_AND_TAILS)
		global.characters = min(global.characters, 3)
	#endif

		D0.u16 = u16[0x007d22 + levelselect.selection * 2]
		if (D0.u16 & 0x8000)
		{
			global.game_mode = 0
			return true
		}

		if (D0.u16 != 0x5555)
		{
		if (ScaredHaters != 1)
		{
			// Start game
			Standalone.playAudio(0xaf)
			lives_counter = 3
			global.sk_bluespheres = 0
		#if STANDALONE
			player.next_life_score = 5000
			unused.player2.next_life_score = 5000
		#endif

			if (D0.u16 == 0x4000 || D0.u16 == 0x4001)
			{
				// Start Blue Spheres
				if (D0.u16 == 0x4000)
				{
					// Blue Spheres from Sonic 3
					if (global.lock_on_state != 0)
					{
						global.sk_bluespheres = 1
					}
				}
				else if (D0.u16 == 0x4001)
				{
					// Blue Spheres from Sonic & Knuckles
					global.sk_bluespheres = 1
				}

				// Start Blue Spheres
				global.game_mode = 0x34

			#if STANDALONE
				if (control.pad1.state & CONTROL_A)
				{
					// This is needed to make the special stage selection (incl. 8th stage) work
					//  -> You need to start a special stage form level select by pressing A + Start
					//  -> Current sound test selection tells the game which stage to start
					//  -> See "BlueSpheres.getNextOpenStageIndex()" function for more
					debug_mode.unlocked = 1
				}

			#else
				// Tried to start a Sonic 3 stage in S&K ?
				if (global.lock_on_state != 0)
				{
					if (global.zone_act != 0x0400 && global.zone_act < 0x0700)
					{
						global.zone_act = 0x0700
						global.zone_act.apparent = 0x0700
						checkpoint.zone_act = 0x0700
						checkpoint.zone_act.apparent = 0x0700
					}
				}
			#endif
				return false
			}
			else
			{
				// Normal levels
				if (fn007d6c())
				{
					return false
				}
			}
		}
	}
	}
#if STANDALONE
	else if (control.pad1.pressed & CONTROL_B || Input.buttonPressed(BUTTON_BACK))
	{
		playSound(0xad)

		u32 backupA0 = A0
		FadeOutScreenBlocking()
		A0 = backupA0

		// Do not fade out music in this case, Data Select music is meant to kept playing
		Game.returnToMainMenu()
		yieldExecution()
		return false
	}
	if (Input.buttonPressed(BUTTON_Y))
	{
		if (levelselect.selection != 0x20)
		{
			levelselect.selection = 0
			if (!EM_2PSTAGES)
			{
				EM_2PSTAGES = 1
				Audio.playAudio(0x52)
			}
			else
			{
				EM_2PSTAGES = 0
				Audio.playAudio(0x7B)
			}
		}
	}
#endif
	return true
	}
	else return base.LevelSelect.innerUpdate()
}

//# address-hook(0x007f62) end(0x008010)
//# translated(0x008012) end(0x00803e)
function void fn007f62()
{
	if (!LS_FORCE_BASE)
	{
		if (levelselect.selection == 0x05 && EM_2PSTAGES) // Altar
		{
			A4 = 0xffff0000
			A5 = 0x008040
			A3 = A5 + levelselect.selection * 4
			D0 = u32(u8[A3]) * 0x50 + u8[A3 + 1]
			A1 = A4 + D0.s16
		}
		A4 = 0xffff0000
		A5 = 0x008040
		A3 = A5 + levelselect.selection * 4
		D0 = u32(u8[A3]) * 0x50 + u8[A3 + 1]
		A1 = A4 + D0.s16

		D1 = u32(u8[A3]) * 0x80 + u8[A3 + 1]
		D1.u16 += 0xc000

		for (u8 i = 0; i < 0x0f; ++i)
		{
			D0.u16 = u16[A1] + D3.u16
			A1 += 2
		}

		A3 += 2
		D0 = u8[A3]
		if (D0.u8 != 0)
		{
			D0 = u32(D0.u16) * 0x50 + u8[A3 + 1]
			A1 = A4 + D0.u16

			D1 = 0xc000 + u8[A3] * 0x80 + u8[A3 + 1]
			D0.u16 = u16[A1] + D3.u16
			A1 += 2
		}
	}
	else base.fn007f62()
}
//# translated(0x007d6c) end(0x007e62)
function bool fn007d6c()
{
	if (!LS_FORCE_BASE)
	{
		if (true) // i'm doing this for the sake of keeping it looking decent to look at
		{
			if (levelselect.selection == 0x1c) // Gachapon
			{
				D0.u16 = 0x1300
				Nemesis.loadDataToVRAM(0x1927fe, 0x9280)
			}
			else if (levelselect.selection == 0x1d) // Rotating
				D0.u16 = 0x1500
			else if (levelselect.selection == 0xff) // Spheres (please don't ask why i chose 0xff)
				D0.u16 = 0x1400
		}
		if (EM_2PSTAGES)
		{
			if (levelselect.selection == 0x00) // ALZ
				D0.u16 = 0x0e00
			else if (levelselect.selection == 0x01) // BPZ
				D0.u16 = 0x0f00
			else if (levelselect.selection == 0x02) // CGZ
				D0.u16 = 0x1000
			else if (levelselect.selection == 0x03) // DPZ
				D0.u16 = 0x1100
			else if (levelselect.selection == 0x04) // EMZ
				D0.u16 = 0x1200
			else if (levelselect.selection == 0x05) // Altar
			{
				D0.u16 = 0x1701
			}
			else if (levelselect.selection == 0x06) // Ending
				D0.u16 = 0x0d01
		}
		else if (LS_ZONEORDER)
		{
			if (levelselect.selection == 0x08) // ICZ 1
				D0.u16 = 0x0400 // send to FBZ 1
			else if (levelselect.selection == 0x09) // ICZ 2
				D0.u16 = 0x0401 // send to FBZ 2
			else if (levelselect.selection == 0x0a) // LBZ 1
				D0.u16 = 0x0500 // send to ICZ 1
			else if (levelselect.selection == 0x0b) // LBZ 2
				D0.u16 = 0x0501 // send to ICZ 2
			else if (levelselect.selection == 0x0c) // MHZ 1
				D0.u16 = 0x0600 // send to LBZ 1
			else if (levelselect.selection == 0x0d) // MHZ 2
				D0.u16 = 0x0601 // send to LBZ 2
			else if (levelselect.selection == 0x0e) // FBZ 1
				D0.u16 = 0x0700 // send to MHZ 1
			else if (levelselect.selection == 0x0f) // FBZ 2
				D0.u16 = 0x0701 // send to MHZ 2
		}
	}
	return base.fn007d6c()
}
function void fn007e64()
{
	if (!LS_FORCE_BASE)
	{
		bool skipPart = false
		if ((control.pad1.pressed & (CONTROL_UP | CONTROL_DOWN)) == 0)
		{
			--u16[0xffffff80]
			skipPart = (s16[0xffffff80] >= 0)
		}

		if (!skipPart)
		{
			u16[0xffffff80] = 11
			if (control.pad1.state & CONTROL_UP)
			{
				if (levelselect.selection == 0x20 && EM_2PSTAGES)
					levelselect.selection = 0x07
				if (levelselect.selection == 0x1c)
					levelselect.selection = 0x1a
				else if (levelselect.selection == 0x1a)
					levelselect.selection = 0x1b
				else if (levelselect.selection == 0x1b)
					levelselect.selection = 0x19
				else if (levelselect.selection == 0xff)
					levelselect.selection = 0x1d
				else if (levelselect.selection == 0x1e)
					levelselect.selection = 0xff
				else
				{
					--levelselect.selection
					if (s16(levelselect.selection) < 0)
						levelselect.selection = 0x20
				}
			}
			if (control.pad1.state & CONTROL_DOWN)
			{
				if (levelselect.selection == 0x06 && EM_2PSTAGES)
					levelselect.selection = 0x1f
				if (levelselect.selection == 0x1a)
					levelselect.selection = 0x1c
				else if (levelselect.selection == 0x1b)
					levelselect.selection = 0x1a
				else if (levelselect.selection == 0x19)
					levelselect.selection = 0x1b
				else if (levelselect.selection == 0x1d)
					levelselect.selection = 0xff
				else if (levelselect.selection == 0xff)
					levelselect.selection = 0x1e
				else
				{
					++levelselect.selection
					if (levelselect.selection > 0x20)
						levelselect.selection = 0
				}
			}
			return
		}

		if (levelselect.selection == 0x20)
		{
			// Sound test
			if (control.pad1.pressed & CONTROL_LEFT)
			{
				if (levelselect.soundtest > 0)
					--levelselect.soundtest
			}
			if (control.pad1.pressed & CONTROL_RIGHT)
			{
				levelselect.soundtest = (levelselect.soundtest + 1) & 0xff
			}
			if (control.pad1.pressed & CONTROL_A)
			{
				if (ST_STYLE == 0)
					levelselect.soundtest = (levelselect.soundtest + 0x10) & 0xff
				else
					levelselect.soundtest = (levelselect.soundtest + 0x0a) & 0xff
			}
			if (Input.buttonPressed(BUTTON_Y))
			{
				if (ST_STYLE == 0)
					levelselect.soundtest = (levelselect.soundtest - 0x10) & 0xff
				else
					levelselect.soundtest = (levelselect.soundtest - 0x0a) & 0xff
			}
			if (control.pad1.pressed & CONTROL_C)
			{
				if (ScaredHaters == 0)
				{
					if (LS_MUSIC != 0 && (levelselect.soundtest < 0x33 || levelselect.soundtest >= 0xf0)) // 0xf0 fix provided by Lean
						playMusic(MUSIC_CTRL_STOP)
					if (LS_MUSIC != 0 && levelselect.soundtest == 0xfe)
						playLevelSelectMusic()
					else
						playMusic(levelselect.soundtest)
				}
				EM.checkCheats()
			}
			if (control.pad1.pressed & CONTROL_B)
			{
				playMusic(0xe3)
			}
		}
		else
		{
			if (control.pad1.pressed & (CONTROL_LEFT | CONTROL_RIGHT) && !EM_2PSTAGES)
			{
				if (levelselect.selection == 0x1b)
					levelselect.selection = 0x07
				else if (levelselect.selection == 0x08)
					levelselect.selection = 0x1a
				else if (levelselect.selection == 0x1a)
					levelselect.selection = 0x08
				else if (levelselect.selection == 0x09)
					levelselect.selection = 0x1a
				else if (levelselect.selection == 0xff)
					levelselect.selection = 0x0b
				else
					levelselect.selection = u8[0x007f22 + levelselect.selection]
			}

			if (control.pad1.pressed & CONTROL_C)
			{
				u8 maxCharacterSelection = 3
			#if STANDALONE
				// Knuckles & Tails
				if (Game.isSecretUnlocked(SECRET_KNUX_AND_TAILS))
				{
					maxCharacterSelection = 4
				}
			#endif

				++levelselect.characters
				if (levelselect.characters > maxCharacterSelection)
					levelselect.characters = 0
			}
		}
	}
	else base.fn007e64()
}

function void EM.checkCheats()
{
	// Chaos/Super Emerald checking
	if (EM_CHAOSEMERALDS == 0 && levelselect.soundtest == 0x04)
		++EM_CHAOSEMERALDS

	if (EM_CHAOSEMERALDS == 1 && levelselect.soundtest == 0x01)
		++EM_CHAOSEMERALDS

	if (EM_CHAOSEMERALDS == 2 && levelselect.soundtest == 0x02)
		++EM_CHAOSEMERALDS

	else if (EM_CHAOSEMERALDS == 3 && levelselect.soundtest == 0x06)
	{
		++EM_CHAOSEMERALDS
		global.chaos_emeralds = 7 // Give the Chaos Emeralds
		Audio.playAudio(0x2B) // Chaos Emerald Sound
		System.writeDisplayLine("7 CHAOS EMERALDS IN HAND") // Make-believes reborn
		for (u8 i = 1; i <= 7; i++)
			u8[0xffffffb2 + (i - 1)] = 0x01
	}
	else if (EM_CHAOSEMERALDS == 4 && levelselect.soundtest == 0x04)
		++EM_CHAOSEMERALDS
	else if (EM_CHAOSEMERALDS == 5 && levelselect.soundtest == 0x01)
		++EM_CHAOSEMERALDS
	else if (EM_CHAOSEMERALDS == 6 && levelselect.soundtest == 0x02)
		++EM_CHAOSEMERALDS
	else if (EM_CHAOSEMERALDS == 7 && levelselect.soundtest == 0x06)
	{
		++EM_CHAOSEMERALDS
		Audio.playAudio(0x2B) // Chaos Emerald Sound
		Audio.playAudio(0xAC) // Continue Sound
		global.super_emeralds = 7 // Give the Super Emeralds
		global.traded_emeralds = 7 // Gives all Traded Emeralds so the Super Rings do the color cycling
		System.writeDisplayLine("7 SUPER EMERALDS IN HAND") // Legends blurred and torn
		for (u8 i = 1; i <= 7; i++)
			u8[0xffffffb2 + (i - 1)] = 0x03
	}
}