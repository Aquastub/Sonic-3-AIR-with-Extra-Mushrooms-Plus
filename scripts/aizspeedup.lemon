//# address-hook(0x0684ec) end(0x0684fa)
function void AIZ1.Transition.Update()
{
	if (!AIZ_FLAME_SEQ)
		base.AIZ1.Transition.Update()
	else
	{
		level.boss_encounter = 0
		System.setGlobalVariableValueByName("OPG_AIZBombing", 0) // i really do not like how the cutscene goes with Time Attack flames and the Origins cutscene
		call tableLookupAddress(0x0684fe, objA0.base_state)
	}
}

//# address-hook(0x06852c) end(0x068550)
function void fn06852c()
{
	if (!AIZ_FLAME_SEQ)
	{
		base.fn06852c()
		return
	}
#if STANDALONE
	// Extend level chunks a bit
	u8[0xffff82ce] = u8[0xffff82cd]
	u8[0xffff832f] = u8[0xffff832e]
	u8[0xffff8390] = u8[0xffff838f]
#endif

	D5.u16 = 0x2f10
	if (camera.position.x.u16 < D5.u16)
	{
	#if STANDALONE
		// Set right border here already to prevent camera going too far for one frame
		move_area.right = D5.u16 + (getScreenWidth() - 320)
	#endif
		return
	}

	if (AIZ_FLAME_SEQ || Game.isTimeAttack())
	{
		bool queueAIZ2Music = Mods.isModActive("Music Cues Customization") && System.getGlobalVariableValueByName("MCC_AIZ1Fire_music") == 1
		bool playingInvincibilityMusic = (u8[0xffffb000 + 0x2b] & char.bonus.INVINCIBLE && !(super.active || super.active.tails)) || ((super.active || super.active.tails) && Game.getSetting(SETTING_AUDIO_SUPER_THEME) > 1)
		if (queueAIZ2Music && !playingInvincibilityMusic)
			playMusic(MUSIC_CTRL_FADEOUT)
		// Trigger fire wall immediately
		u16[0xffffeec6] = 0xff

		addPatternLoadingCue(0x083d48)
		playSound(0x48)
		playSound(0x4e)
		UnloadObject()
		level.boss_encounter = 0
		if (!playingInvincibilityMusic && !queueAIZ2Music)
			chooseFittingMusic()
		if (player1.control_override = 0xff) // ENSURE that there is no softlock with a mod overriding player control.
		{
			player1.control_override = 0
			control.player1 = 0
		}
		return
	}

	// Trigger AIZ 1 transition cutscene
	objA0.countdown_callback = 0x06857a

	// "spawnIdenticalChildObjects(0x06906a)" replaced by:
	spawnChildObjects(0x068dfa, 0, 0, 6)

	loadPaletteLine1(0x06917c)

	fn068556()
}

/# address-hook(0x04fd62)
function void fn04fd62()
{
	base.fn04fd62()
	if (kosinski.waiting_modules == 0)
	{
		if (Mods.isModActive("Music Cues Customization") && System.getGlobalVariableValueByName("MCC_AIZ1Fire_music") == 1)
		{
			if !((u8[0xffffb000 + 0x2b] & char.bonus.INVINCIBLE && !(super.active || super.active.tails)) || ((super.active || super.active.tails) && Game.getSetting(SETTING_AUDIO_SUPER_THEME) > 1))
			{
				chooseFittingMusic()
				if ((super.active || super.active.tails) && Game.getSetting(SETTING_AUDIO_SUPER_THEME) == 1)
					Standalone.setFastMusicFlag(FastMusicFlag.SUPER_THEME, true)
			}
		}
	}
}

//# address-hook(0x050426) end(0x050452)
function void fn050426()
{
	if (AIZ_BLIMP_SPEED > 2)
		base.fn050426()
}

//# address-hook(0x05034a) end(0x05038c)
function void fn05034a()
{
	if (AIZ_BLIMP_SPEED == 2)
	{
		objA0.update_address = 0x0506be
		u8[0xffffeec4] = 0xff
		return
	}
	else
	{
		objA0.update_address = 0x050390
		u32[A0 + 0x2e] = 0x23c0a6
		s16[A0 + 0x32] = 0x01a4		// Time until first bomb drop
		if (AIZ_BLIMP_SPEED == 1)
		{
			if (Game.getSetting(SETTING_AIZ_BLIMPSEQUENCE))
				s16[A0 + 0x32] = 0x0120 - 0x50
			else
				s16[A0 + 0x32] = 0x0120 - 0x10
		}
		else
		{
			if (Game.getSetting(SETTING_AIZ_BLIMPSEQUENCE))
				s16[A0 + 0x32] = 0x0120 - 0x50
		}
		D1.u16 = 0x3fbc
		D2 = 1
		while (D2.s16 >= 0)
		{
			// Spawn blimp propellers
			if (!allocDynamicObjectAfterA0())
				break

			objA1.update_address = 0x050426
			u16[A1 + 0x2e] = D1.u16
			D1.u16 = 0x3dcc
			--D2.s16
		}

		// Loads palette colors 0x10 .. 0x1f
		copyMemory(0xfffffc20, 0x23c05a, 0x20)

		fn050390()
	}
}

//# address-hook(0x050390) end(0x050424)
function void fn050390()
{
	// Blimp movement
#if STANDALONE
	if (AIZ_BLIMP_SPEED == 1)
	{
		if (Game.getSetting(SETTING_AIZ_BLIMPSEQUENCE))
			u32[0xffffee98] -= 0x10000
		else
			u32[0xffffee98] -= 0x8800 + ((getScreenExtend()*((5/3))) << 8)
	}
	else
	{
		if (Game.getSetting(SETTING_AIZ_BLIMPSEQUENCE))
			u32[0xffffee98] -= 0x10000
		else
			u32[0xffffee98] -= 0x8800 + ((getScreenExtend() / 4) << 8)
	}
#else
	u32[0xffffee98] -= 0x8800
#endif

	if (u16[0xffffee98] < 0x3cdc)
	{
		objA0.update_address = 0x0506be
		u8[0xffffeec4] = 0xff
		if (allocDynamicObjectAfterA0())
		{
			// Spawn the tree spawner
			objA1.update_address = 0x050614
		}
		return
	}

	D1.u16 = u16[0xffffee98]
	D0.u16 = u16[0xffffee98] - 0x3d5c
	if (D0.s16 < 0)
	{
		u16[0xffffee9c] = u16[0xffffeea2] + ((-D0.s16) >> 1)
	}
	else
	{
		D1.u16 = (D1.u16 >> 2) & 0x0f
		u16[0xffffee9c] = u16[0xffffeea2] + u8[0x23c096 + D1.s16]
	}

	D0.u16 = (level.framecounter - 1) & 0x0f
	if (D0.u16 == 0)
	{
		playSound(0xbd)
	}

	--s16[A0 + 0x32]
	if (s16[A0 + 0x32] == -1)	// Do not check for (s16[A0 + 0x32] < 0) here, as this would lead to different behaviour
	{
		// Table with bomb spawn data from 0x23c0a6 on;
		// consists of 21 entries with the following 2 words each:
		//  - Frames until next bomb drop (0x20 or 0x40)
		//  - Position offset, e.g. 0x3f5c
		A2 = u32[A0 + 0x2e]
		objA0.value32 = u16[A2]

		if (s16[A0 + 0x32] >= 0)
		{
			if (allocDynamicObjectAfterA0())
			{
				// Spawn bomb
				objA1.update_address = 0x05047c
				u16[A1 + 0x2e] = u16[A2+2]

				u32[A0 + 0x2e] += 4
			}
		}
	}
}