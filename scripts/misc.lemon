function void Renderer.drawCustomSprite(u64 key, s16 px, s16 py, u8 atex, u8 flags, u16 renderQueue) 
{
#if GAMEAPP < 0x23082700
	if (key == "sonic3air_logo" && global.game_mode == 0x0c) // draw extra mushrooms logo
	{
		if (!Mods.isModActive("Sonic 3: D.A. Garden Edition"))
			u8 emYPos = 22
		else emYPos = 38
		Renderer.drawCustomSprite("extramushrooms", px-84, emYPos, 0, 0, renderQueue-1)
		
		if (bros_chancetime >= 200 && bros_chancetime <= 250)
			Renderer.drawCustomSprite("luigiboard", px-80, 80, 0, 0, 0x1002) // the luigi board.....
		if (bros_chancetime >= 10 && bros_chancetime <= 20 && NO_SECRETS_ON_3AIRMENU != 2) // face my wega storm
			Renderer.drawCustomSprite("wega", px-64, 0, 0, 0, 0x1000)
		if (bros_chancetime >= 50 && bros_chancetime <= 100 && NO_SECRETS_ON_3AIRMENU != 3)
			Renderer.drawCustomSprite("bros", px, 69, 0, 0, 0x1001) // i'm brosing out rn
	}
#endif
	
	if (key == "ls_icon_12" && LS_DEZ)
		key = stringformat("%s_origins", key)
	if (key == "ls_bonus_1" && (LS_BONUS == 2 || Mods.isModActive("Sonic 3 Complete Level Select+")))
		key = "ls_bonus_2"
	else if (key == "ls_bonus_2" && (LS_BONUS == 2 || Mods.isModActive("Sonic 3 Complete Level Select+")))
		key = "ls_bonus_1"
	if (Mods.isModActive("Sonic 3 Complete Level Select+") && !LS_FORCE_BASE && (global.game_mode == 0x1c || global.game_mode == 0x34))
	{
		if (Mods.getModPriority("Sonic 3 Complete Level Select+") < Mods.getModPriority("Sonic 3 A.I.R. with Extra Mushrooms"))
		{
			if (key == "S3Complete_LevelSelectIcon_Sonic1" || key == "S3Complete_LevelSelectIcon_Sonic2" || key == "S3Complete_LevelSelectIcon_Sonic3" || key == "S3Complete_LevelSelectIcon_Sonic1Acc" || key == "S3Complete_LevelSelectIcon_Sonic2Acc" || key == "S3Complete_LevelSelectIcon_Sonic2Mobile" || key == "S3Complete_LevelSelectIcon_SonicCD" || key == "S3Complete_LevelSelectIcon_Tails" || key == "S3Complete_LevelSelectIcon_TailsOG" || key == "S3Complete_LevelSelectIcon_Knuckles" || key == "S3Complete_LevelSelectIcon_KnucklesS2")
			{
				px -= px
				px += getScreenWidth()
			}
			#if EXTRA_CHARACTERS_ACTIVE
				#if EXTRA_CHARACTERS_UNLIMITED
					if (key == RenderExtraCharIcon(global.xtrachar))
					{
						px -= px
						px += getScreenWidth()
					}
				#endif
			#endif
		}
	}
	base.Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
}

#if GAMEAPP >= 0x23082700
function void MainMenuBG.Update(u16 cameraForegroundX, u16 cameraBackgroundX)
{
	base.MainMenuBG.Update(cameraForegroundX, cameraBackgroundX)
	if (!Mods.isModActive("Sonic 3: D.A. Garden Edition"))
		u8 emYPos = 22
	else emYPos = 38
	Renderer.drawCustomSprite("extramushrooms", MainMenuBG.logoPosition-84, emYPos, 0, 0, 0x9999)
	
	if (bros_chancetime >= 200 && bros_chancetime <= 250)
		Renderer.drawCustomSprite("luigiboard", MainMenuBG.logoPosition-80, 80, 0, 0, 0x1002) // the luigi board.....
	if (bros_chancetime >= 10 && bros_chancetime <= 20 && NO_SECRETS_ON_3AIRMENU != 2) // face my wega storm
		Renderer.drawCustomSprite("wega", MainMenuBG.logoPosition-64, 0, 0, 0, 0x1000)
	if (bros_chancetime >= 50 && bros_chancetime <= 100 && NO_SECRETS_ON_3AIRMENU != 3)
		Renderer.drawCustomSprite("bros", MainMenuBG.logoPosition, 69, 0, 0, 0x1001) // i'm brosing out rn
}
#endif

//# address-hook(0x01da60) end(0x01db26)
function void ItemEffect.ApplySuperTransformation() // RSDK Parity
{
	if ((super.active | super.active.tails) != 0xff) // Not Hyper?
	{
		base.ItemEffect.ApplySuperTransformation()
	}
	else
	{
		addRings(50)
	}
}

#if GAMEAPP < 0x23082700

//# address-hook(0x00565a) end(0x0056e2)
function void fn00565a() // fixing Sonic's horizontal position for those who do not have the latest test build as of this comment (08/27/2023)
{
	if (objA0.position.x.u16 != 0xe8 + getScreenExtend())
		objA0.position.x.u16 = 0xe8 + getScreenExtend()
	base.fn00565a()
}

//# address-hook(0x005b42) end(0x005c0a)
function void fn005b42() // fix for S&K title screen for people outside of those using the previously mentioned test build
{
	base.fn005b42()
	u8[A2+10] = 0
	u8[A2 + 11] = D5.u8
}

#endif

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if (ALT_MGZ_PALETTE)
		System.loadExternalRawData("mgz custom palette", 0x0A8F5C)
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function u64 Monitor.getIconSpriteKey(u8 type)
{
	if (type == 0x08)
		if (super.active || super.active.tails)
			return "monitor_icon_em_surprise"
		else
			return "monitor_icon_invincibility"
	else return base.Monitor.getIconSpriteKey(type)
}

// creating the Hyper Palette stuff
function void UpdatePaletteEffects.SuperForm.moddingVersion(u8 characterVersion)
{
	bool isHyperEffect = (super.active == 0xff || super.active.tails == 0xff)
	#if EXTRA_CHARACTERS_ACTIVE
		#if EXTRA_CHARACTERS_UNLIMITED
			if (global.xtrachar)
			{
				base.UpdatePaletteEffects.SuperForm.moddingVersion(characterVersion)
				return
			}
		#endif
	#endif
	if (!isExtraSlot() && (super.palettefx.state & 0x80 && (ORIGINS_HYPER_FX % 2 != 0) && (isHyperEffect || (!isHyperEffect && FASTER_SUPER_FADE))))
	{
		// Update ongoing palette effect
		u8 character = getMainCharacter()
		u16 blendFactor
		u16 nextFrame
		if (character == CHARACTER_SONIC && isHyperEffect && ORIGINS_HYPER_FX % 2 != 0)
		{
			blendFactor = super.palettefx.timer
			nextFrame = (super.palettefx.frame + 9) % (isHyperEffect ? 108 : 18)
		}
		else
		{
			blendFactor = super.palettefx.timer * 0x100 / (isHyperEffect ? 0x07 : 0x0f)
			nextFrame = (super.palettefx.frame + 6) % (isHyperEffect ? 108 : 18)
		}
		if (characterVersion == 2)
		{
			// Tails
			nextFrame = (super.palettefx.frame.tails + 6) % (isHyperEffect ? 108 : 18)
			blendFactor = super.palettefx.timer.tails * 0x100 / (isHyperEffect ? 0x07 : 0x0f)
		}
		if (isHyperEffect && character == CHARACTER_SONIC)
		{
			if (nextFrame % 2 == 0)
				blendFactor = 0x100
			else
				blendFactor = 0
		}
		else
		{
			if (nextFrame % 18 == 0)
				blendFactor = 0x100 - blendFactor
			else if (nextFrame % 18 == 12)
				blendFactor = 0
		}
		for (u8 underwater = 0; underwater < (level.water_present ? 2 : 1); ++underwater)
		{
			u32 offset = character * 0x40 + (underwater ? 0x300 : 0)
			u32 source = 0x802180 + offset
			u32 dest   = 0x802000 + offset

			// Load modded Super palette
			u8 line = getModdedPaletteLine(character, isHyperEffect, underwater)

			zeroMemory(dest, 0x40)
			u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(character), line, 0x800000, 0x20)
			for (u16 i = 0; i < numColors; ++i)
			{
				u32 rgba = u32[0x800000 + i * 4]
				u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
			}

			for (u8 k = 0; k < 0x40; k += 2)
			{
				if (u16[dest + k] == 0)
				{
					// Use original color as fallback
					u16[dest + k] = u16[source + k]
				}
				else
				{
					// Apply flash effect
					u16[dest + k] = blendColorsPacked(u16[dest + k], 0x0eee, blendFactor)
				}
			}
		}
		if (characterVersion == 2)
		{
			// Super/Hyper Tails
			--super.palettefx.timer.tails
			if (super.palettefx.timer.tails < 0)
			{
				super.palettefx.timer.tails = isHyperEffect ? 0x07 : 0x0f
				super.palettefx.frame.tails = nextFrame
			}

			// Also update Sonic's colors, for the flickies
			if (super.active.tails == 0xff && !isExtraSlot())
				UpdatePaletteEffects.UpdateSuperSonic.Smoothed(0xff)
			return
		}
		if (character == CHARACTER_SONIC && isHyperEffect && ORIGINS_HYPER_FX % 2 != 0)
			super.palettefx.timer -= 3
		else if (character == CHARACTER_SONIC && !isHyperEffect && FASTER_SUPER_FADE)
			super.palettefx.timer -= (5/3)
		else
			--super.palettefx.timer
		bool FasterSuperSonicFade = (FASTER_SUPER_FADE && character == CHARACTER_SONIC)
		if (super.palettefx.timer < 0)
		{
			super.palettefx.timer = isHyperEffect ? ((global.game_mode == 0x0c && isSonicIntro() && global.level_started == 0 || global.rolling_demo) ? 0x1C : 0x0e) : FasterSuperSonicFade ? 0x0d : 0x0f
			super.palettefx.frame = isHyperEffect ? nextFrame: FasterSuperSonicFade ? nextFrame*2: nextFrame
		}
	}
	else base.UpdatePaletteEffects.SuperForm.moddingVersion(characterVersion)
}

// removing alpha from Hyper stars
function bool Standalone.onDrawVdpSprite(s16 px, s16 py, u8 size, u16 index, u16 renderQueue)
{
	if (ORIGINS_HYPER_FX > 1 && objA0.update_address == 0x0193ec || objA0.update_address == 0x0193ca)
	{
		Renderer.drawVdpSpriteWithAlpha(px, py, size, index, renderQueue, 0xff)
		return true
	}
	else return base.Standalone.onDrawVdpSprite(px, py, size, index, renderQueue)
}

//# address-hook(0x01da0e) end(0x01da5e)
function void ItemEffect.ApplyInvincibility()
{
	if (super.active != 0 || super.active.tails != 0) // Did the player use emeralds?
	{
		if (super.active == 0xFF || super.active.tails == 0xFF) // Is the character Hyper?
		{
			EM.AddRings(HSRING) // Add appropriate amount based on Hyper forms
		}
		else // Character is determined Super
		{
			EM.AddRings(SSRING) // Add appropriate amount based on Super forms
		}
	}
	else // Character didn't use emeralds, use base scripts
	{
		base.ItemEffect.ApplyInvincibility()
	}
}

function void EM.AddRings(u32 value)
{
	D0 = value
	ring_counter = min(ring_counter + D0.u16, 999)
	player.total_rings = min(player.total_rings + D0.u16, 999)
	hud.dirty.rings |= 0x01
	if (checkForExtraLifeByRings())
	{
		++player.item_count
		gainExtraLife()
	}
	else determineExtraRingSound()
}

function void determineExtraRingSound()
{
	if (EXRINGSFX != 0) // If the sound is MEANT to play
	{
		if (super.active == 0xFF && HSRING == 0x00) // If the character is Hyper and there are no amount of rings added
		{

		}
		else if (super.active != 0xFF && SSRING == 0x00) // If the character isn't Hyper and there are no amount of rings added
		{

		}
		else // Any other scenario is moved to here
		{
			if (EXRINGSFX == 1)
				playMusic(SFX_RING)
			else if (EXRINGSFX == 2)
				playSound(0xb0)
			else
				Audio.playAudio("em_extrarings", AudioContext.CONTEXT_SOUND)
		}
	}
}

function void Character.updateJumpMoves()
{
	#if EXTRA_CHARACTERS_UNLIMITED
	if (IsP1Sawnic() || global.xtrachar)
	#else
	if (IsP1Sawnic() || isExtraSlot())
	#endif
	{
		base.Character.updateJumpMoves()
		return
	}
	u8 input_state     = (char.character == CHARACTER_TAILS) ? control.tails.state   : control.player1.state
	u8 input_pressed   = (char.character == CHARACTER_TAILS) ? control.tails.pressed : control.player1.pressed
	bool isSuperActive = (char.character == CHARACTER_TAILS) ? super.active.tails    : super.active

	if (char.jumping)
	{
		s16 max_vy = (char.flags & char.flag.UNDERWATER) ? -0x200 : -0x400
		if (char.velocity.y < max_vy)
		{
			if ((input_state & CONTROL_ABC) == 0)
			{
				char.velocity.y = max_vy
			}
		}
		else
		{
			if (char.double_jump_state == 0)
			{
				if (Input.buttonPressed(BUTTON_Y))
				{
					if (!isSuperActive && SHTS == 0 && (!Mods.isModActive("Sonic 3: D.A. Garden Edition") || ((Mods.isModActive("Sonic 3: D.A. Garden Edition") && !System.getGlobalVariableValueByName("original_mode")))))
					{
						if (Character.performSuperTransformation())
							return
					}
					else if (!Mods.isModActive("Sonic 3: D.A. Garden Edition"))
						base.Character.updateJumpMoves()
				}
				if (input_pressed & CONTROL_ABC)
				{
					if (onCharacterPressedJumpInMidAir(input_state, input_pressed))
					{
						if (char.character == CHARACTER_SONIC)
							SonicPressedJumpInMidAir()
						else if (char.character == CHARACTER_TAILS)
							TailsPressedJumpInMidAir()
						else if (!competition_mode.active)
							KnucklesPressedJumpInMidAir()
						#if EXTRA_CHARACTERS_ACTIVE
							#if EXTRA_CHARACTERS_UNLIMITED
								else if (global.xtrachar = 0x00)
							#endif
						#else
								else if (!isExtraSlot())
						#endif
							SonicPressedJumpInMidAir()
						else
							base.Character.updateJumpMoves()
					}
				}
			}

			if (Game.getSetting(SETTING_DROPDASH) && char.character == CHARACTER_SONIC && !competition_mode.active)
			{
				if (((super.active != 0xff && Game.getSetting(SETTING_SUPER_SONIC_ABILITY) != 2) || (!super.active && Game.getSetting(SETTING_SUPER_SONIC_ABILITY) == 2)) || (!performHyperDash || ORIGINS_HD) || (char.double_jump_state == 0 && AUTODD == 1))
				{
					if (AUTODD == 1)
					{
						bool chargeDropDash = (control.player1.state & CONTROL_ABC) && (AUTODD == 1 || (char.bonus_effect & char.bonus.INVINCIBLE) || sonic.dropdash_counter > 0) && ((char.double_jump_state == 0 || !char.double_jump_state && AUTODD == 1) && super.active == 0 || (char.double_jump_state || !char.double_jump_state) && (super.active != 0 || (((char.bonus_effect & char.bonus.ELEMENTAL_SHIELDS) == 0 || (char.bonus_effect & char.bonus.INVINCIBLE) || (char.bonus_effect & char.bonus.SHIELD_LIGHTNING)) && AUTODD == 1)))
						
						if (chargeDropDash)
						{
							if (sonic.dropdash_counter < DROPDASH_FULLCHARGE)
							{
								// Drop dash charging
								char.flags &= ~char.flag.CONTROL_LOCK // this unlocks roll jump regardless of the setting. it makes the game more fun with auto-dropdash when using roll jump lock
								++sonic.dropdash_counter
								if (sonic.dropdash_counter == DROPDASH_FULLCHARGE)
								{
									// Fully charged now
									char.state = char.state.SONIC_DROPDASH
									Audio.playAudio("dropdash_charge", AudioContext.CONTEXT_SOUND)
								}
							}
						}
						else if (sonic.dropdash_counter > 0)
						{
							// Abort drop dash
							sonic.dropdash_counter = 0
							char.state = char.state.ROLLING
						}
					}
					else
						base.Character.updateJumpMoves()
				}
			}
		}
	}
	else
	{
		if (char.spindash == 0)
		{
			char.velocity.y = max(char.velocity.y, -0x0fc0)
		}
	}
}

function void SonicPressedJumpInMidAir()
{
	char.flags &= ~char.flag.CONTROL_LOCK
	char.double_jump_state = 1
	if ((super.active && Game.getSetting(SETTING_SUPER_SONIC_ABILITY) != 1) || (super.active & 0x80))
	{
		bool isHyperSonic = (super.active & 0x80)			// Hyper Sonic active
		performHyperDash = isHyperSonic
		u8 input = control.player1.state & CONTROL_DPAD		// Only directions

		if (Game.getSetting(SETTING_SUPER_SONIC_ABILITY) == 2)
		{
			performHyperDash = (super.active)				// This allows Super Sonic to use the dash as well
		}

		if (performHyperDash && Game.getSetting(SETTING_HYPER_DASH_CONTROLS) == 1)
		{
			// Hyper Dash requires also pressing D-pad in any direction
			//  -> To allow for Drop Dashing without activating the Hyper Dash before
			performHyperDash = (input != 0)
		}

		if (performHyperDash)
		{
			base.SonicPressedJumpInMidAir()
			char.state = char.state.ROLLING // i like this a lot, don't judge me
		}
		else
		{
			char.double_jump_state = 1
		}
	}
	else if ((!super.active || (super.active < 0xff && (Game.getSetting(SETTING_SUPER_SONIC_ABILITY) == 1))) && !IsP1Sawnic())
	{
		if ((char.bonus_effect & char.bonus.SHIELD_LIGHTNING) && !((char.bonus_effect & char.bonus.INVINCIBLE) && (Game.getSetting(SETTING_SUPER_SONIC_ABILITY) != 1)))
		{
		#if STANDALONE
			if (super.active)
				u8[0xffffcbc0 + 0x20] = 1
			else
		#endif
				u8[0xffffcce8 + 0x20] = 1
			char.double_jump_state = 1

		#if STANDALONE
			if (super.active)
				char.velocity.y = -0x680	// Slightly increasing double jump height for Super Sonic
			else
		#endif
				char.velocity.y = -0x580
			playSound(SFX_LIGHTNINGJUMP)
		}

		else base.SonicPressedJumpInMidAir()
	}
	else base.SonicPressedJumpInMidAir()
}


function bool isExtraSlot()
{
	return base.isExtraSlot()
}

function bool IsP1Sawnic()
{
	return base.IsP1Sawnic()
}